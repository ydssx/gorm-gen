package model

import "gorm.io/gorm"

// {{.TableName}} {{.TableComment}}
type {{.Name | Title}} struct {
	BaseModel
	{{range .Fields}}{{.Name | Title | CamelCase}} {{.Type}} {{.Tag}} {{if .Comment}}// {{.Comment}}{{end}}
	{{end}}
}

type {{.Name | Lower}}Model DB

func New{{.Name | Title}}Model(tx *gorm.DB) *{{.Name | Lower}}Model {
	db := tx.Table("{{.TableName}}").Model(&{{.Name | Title}}{})
	return &{{.Name | Lower}}Model{db: db}
}

func (m *{{.Name | Lower}}Model) SetId(id int) *{{.Name | Lower}}Model {
	m.db = m.db.Where("id = ?", id)
	return m
}

func (m *{{.Name | Lower}}Model) Order(expr string) *{{.Name | Lower}}Model {
	m.db = m.db.Order(expr)
	return m
}

func (m *{{.Name | Lower}}Model) Create({{.Name | Lower}} {{.Name | Title | Title}}) error {
	return m.db.Create(&{{.Name | Lower}}).Error
}

func (m *{{.Name | Lower}}Model) FirstOne() (data {{.Name | Title}}, err error) {
	err = m.db.Take(&data).Error
	return
}

func (m *{{.Name | Lower}}Model) LastOne() (data {{.Name | Title}}, err error) {
	err = m.db.Last(&data).Error
	return
}

func (m *{{.Name | Lower}}Model) DeleteById(id int) error {
	return m.db.Where("id = ?", id).Delete(&{{.Name | Title}}{}).Error
}

func (m *{{.Name | Lower}}Model) List(limit, offset int) (data []{{.Name | Title}}, total int64, err error) {
	query := m.db.Model(&{{.Name | Title}}{})
	err = query.Count(&total).Error
	if err != nil {
		return nil, 0, err
	}
	err = query.Limit(limit).Offset(offset).Find(&data).Error
	return
}